{"version":3,"file":"static/js/451.950d553a.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","redux/filter/selectors.js","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"item-form\":\"ContactForm_item-form__YthZ7\",\"label-form\":\"ContactForm_label-form__yTdPU\",\"input-form\":\"ContactForm_input-form__1DJKe\",\"btn-form\":\"ContactForm_btn-form__ReEGI\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContact } from '../../redux/contacts/operations';\nimport css from './ContactForm.module.css'\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport toast from 'react-hot-toast';\n\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  \n  const dispatch = useDispatch();  \n  const contacts = useSelector(selectContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      toast.error(`${name} is already in contacts.`);\n    } else {\n      dispatch(addContact({ id: nanoid(), name, number }));\n      reset();\n    }\n   \n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div >\n      <h1 className={css.title}>Phonebook</h1>\n      \n      <form onSubmit={handleSubmit} className={css.form}>\n        <div className={css['item-form']}>\n          <label htmlFor=\"name\" className={css['label-form']}>Name</label>\n          <input\n          type=\"text\"\n          name=\"name\"          \n          value={name}          \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n          className={css['input-form']}\n          />\n        </div>\n       \n        <div className={css['item-form']}>\n          <label htmlFor=\"number\" className={css['label-form']}>Number</label>\n          <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}         \n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n          className={css['input-form']}\n          />   \n        </div>        \n        \n        <button type=\"submit\" className={css['btn-form']}>Add contact</button>\n        <br />\n      </form>\n    </div>\n  );\n};\n\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__EZYHO\",\"btn-delete\":\"ContactList_btn-delete__bT29K\"};","export const selectFilter = state => state.filter.filter;","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport css from './ContactList.module.css';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { selectFilter } from '../../redux/filter/selectors';\n\n\nconst ContactList = ({ children }) => {\n  const filtersContacts = (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n\n  const contacts = useSelector(selectContacts); \n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const contactsList = filtersContacts(contacts, filter);\n\n  \n  return (\n    <>\n      <div >\n        <h2 className={css.title}>Contacts</h2>\n        {children}\n        <ul className={css.list}>\n          {contactsList.map(({ name, number, id }) => (\n            <li key={id} className={css.item}>\n              <p>{name}: {number} </p>\n              <button type=\"button\" onClick={() => dispatch(deleteContact(id))} className={css['btn-delete']}>\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"input-filter\":\"Filter_input-filter__XUwSF\",\"text-filter\":\"Filter_text-filter__mUECD\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filter/slice';\nimport css from './Filter.module.css';\nimport { selectFilter } from 'redux/filter/selectors';\n\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const changeFilter = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <>\n      <p className={css['text-filter']}>Find contacts by name</p>\n      <input      \n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={changeFilter}\n      className={css['input-filter']}\n      />\n    </>    \n  );\n};\n\nexport default Filter;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport  ContactForm  from 'components/ContactForm/ContactForm';\nimport  ContactList  from 'components/ContactList/ContactList';\nimport  Filter  from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>{isLoading && <Loader />}</div>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n}"],"names":["selectContacts","state","contacts","selectIsLoading","isLoading","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","currentTarget","value","reset","className","css","onSubmit","preventDefault","some","contact","toLowerCase","toast","addContact","htmlFor","type","pattern","title","required","onChange","selectFilter","filter","children","contactsList","includes","filtersContacts","map","onClick","deleteContact","target","setFilter","Contacts","useEffect","fetchContacts","Helmet","Loader"],"sourceRoot":""}